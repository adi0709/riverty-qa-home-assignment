// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace CardValidation.Tests.IntegrationTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreditCardValidationFeature : object, Xunit.IClassFixture<CreditCardValidationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "IntegrationTests/Features", "Credit Card Validation", "    As a payment processor\n    I want to validate credit card information\n    So " +
                "that I can ensure only valid cards are processed", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CardValidation.feature"
#line hidden
        
        public CreditCardValidationFeature(CreditCardValidationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
#line hidden
#line 7
    await testRunner.GivenAsync("the card validation API is running", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Valid Visa card validation")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Valid Visa card validation")]
        public async global::System.Threading.Tasks.Task ValidVisaCardValidation()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Valid Visa card validation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "Owner",
                            "John Doe"});
                table1.AddRow(new string[] {
                            "Number",
                            "4111111111111111"});
                table1.AddRow(new string[] {
                            "Date",
                            "12/2025"});
                table1.AddRow(new string[] {
                            "Cvv",
                            "123"});
#line 10
    await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table1, "Given ");
#line hidden
#line 16
    await testRunner.WhenAsync("I submit the card for validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 18
    await testRunner.AndAsync("the payment system type should be \"Visa\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Valid MasterCard validation")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Valid MasterCard validation")]
        public async global::System.Threading.Tasks.Task ValidMasterCardValidation()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Valid MasterCard validation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table2.AddRow(new string[] {
                            "Owner",
                            "Jane Smith"});
                table2.AddRow(new string[] {
                            "Number",
                            "5555555555554444"});
                table2.AddRow(new string[] {
                            "Date",
                            "06/2026"});
                table2.AddRow(new string[] {
                            "Cvv",
                            "456"});
#line 21
    await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table2, "Given ");
#line hidden
#line 27
    await testRunner.WhenAsync("I submit the card for validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 28
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 29
    await testRunner.AndAsync("the payment system type should be \"MasterCard\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Valid American Express card validation")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Valid American Express card validation")]
        public async global::System.Threading.Tasks.Task ValidAmericanExpressCardValidation()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Valid American Express card validation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "Owner",
                            "Bob Johnson"});
                table3.AddRow(new string[] {
                            "Number",
                            "378282246310005"});
                table3.AddRow(new string[] {
                            "Date",
                            "03/2027"});
                table3.AddRow(new string[] {
                            "Cvv",
                            "7890"});
#line 32
    await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table3, "Given ");
#line hidden
#line 38
    await testRunner.WhenAsync("I submit the card for validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 40
    await testRunner.AndAsync("the payment system type should be \"AmericanExpress\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Missing owner field validation")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Missing owner field validation")]
        public async global::System.Threading.Tasks.Task MissingOwnerFieldValidation()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Missing owner field validation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "Owner",
                            ""});
                table4.AddRow(new string[] {
                            "Number",
                            "4111111111111111"});
                table4.AddRow(new string[] {
                            "Date",
                            "12/2025"});
                table4.AddRow(new string[] {
                            "Cvv",
                            "123"});
#line 43
    await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table4, "Given ");
#line hidden
#line 49
    await testRunner.WhenAsync("I submit the card for validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
    await testRunner.ThenAsync("the response should be a bad request", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 51
    await testRunner.AndAsync("the validation error should contain \"Owner is required\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Missing card number validation")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Missing card number validation")]
        public async global::System.Threading.Tasks.Task MissingCardNumberValidation()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Missing card number validation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "Owner",
                            "John Doe"});
                table5.AddRow(new string[] {
                            "Number",
                            ""});
                table5.AddRow(new string[] {
                            "Date",
                            "12/2025"});
                table5.AddRow(new string[] {
                            "Cvv",
                            "123"});
#line 54
    await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table5, "Given ");
#line hidden
#line 60
    await testRunner.WhenAsync("I submit the card for validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 61
    await testRunner.ThenAsync("the response should be a bad request", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 62
    await testRunner.AndAsync("the validation error should contain \"Number is required\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Missing expiry date validation")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Missing expiry date validation")]
        public async global::System.Threading.Tasks.Task MissingExpiryDateValidation()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Missing expiry date validation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table6.AddRow(new string[] {
                            "Owner",
                            "John Doe"});
                table6.AddRow(new string[] {
                            "Number",
                            "4111111111111111"});
                table6.AddRow(new string[] {
                            "Date",
                            ""});
                table6.AddRow(new string[] {
                            "Cvv",
                            "123"});
#line 65
    await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table6, "Given ");
#line hidden
#line 71
    await testRunner.WhenAsync("I submit the card for validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 72
    await testRunner.ThenAsync("the response should be a bad request", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 73
    await testRunner.AndAsync("the validation error should contain \"Date is required\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Missing CVV validation")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Missing CVV validation")]
        public async global::System.Threading.Tasks.Task MissingCVVValidation()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Missing CVV validation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "Owner",
                            "John Doe"});
                table7.AddRow(new string[] {
                            "Number",
                            "4111111111111111"});
                table7.AddRow(new string[] {
                            "Date",
                            "12/2025"});
                table7.AddRow(new string[] {
                            "Cvv",
                            ""});
#line 76
    await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table7, "Given ");
#line hidden
#line 82
    await testRunner.WhenAsync("I submit the card for validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 83
    await testRunner.ThenAsync("the response should be a bad request", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 84
    await testRunner.AndAsync("the validation error should contain \"Cvv is required\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Invalid card owner format")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Invalid card owner format")]
        public async global::System.Threading.Tasks.Task InvalidCardOwnerFormat()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Invalid card owner format", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table8.AddRow(new string[] {
                            "Owner",
                            "John123 Doe"});
                table8.AddRow(new string[] {
                            "Number",
                            "4111111111111111"});
                table8.AddRow(new string[] {
                            "Date",
                            "12/2025"});
                table8.AddRow(new string[] {
                            "Cvv",
                            "123"});
#line 87
    await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table8, "Given ");
#line hidden
#line 93
    await testRunner.WhenAsync("I submit the card for validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 94
    await testRunner.ThenAsync("the response should be a bad request", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 95
    await testRunner.AndAsync("the validation error should contain \"Wrong owner\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Invalid card number format")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Invalid card number format")]
        public async global::System.Threading.Tasks.Task InvalidCardNumberFormat()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Invalid card number format", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 97
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "Owner",
                            "John Doe"});
                table9.AddRow(new string[] {
                            "Number",
                            "1234567890123456"});
                table9.AddRow(new string[] {
                            "Date",
                            "12/2025"});
                table9.AddRow(new string[] {
                            "Cvv",
                            "123"});
#line 98
    await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table9, "Given ");
#line hidden
#line 104
    await testRunner.WhenAsync("I submit the card for validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 105
    await testRunner.ThenAsync("the response should be a bad request", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 106
    await testRunner.AndAsync("the validation error should contain \"Wrong number\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Invalid expiry date format")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Invalid expiry date format")]
        public async global::System.Threading.Tasks.Task InvalidExpiryDateFormat()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Invalid expiry date format", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table10.AddRow(new string[] {
                            "Owner",
                            "John Doe"});
                table10.AddRow(new string[] {
                            "Number",
                            "4111111111111111"});
                table10.AddRow(new string[] {
                            "Date",
                            "13/2025"});
                table10.AddRow(new string[] {
                            "Cvv",
                            "123"});
#line 109
    await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table10, "Given ");
#line hidden
#line 115
    await testRunner.WhenAsync("I submit the card for validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 116
    await testRunner.ThenAsync("the response should be a bad request", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 117
    await testRunner.AndAsync("the validation error should contain \"Wrong date\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Expired card validation")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Expired card validation")]
        public async global::System.Threading.Tasks.Task ExpiredCardValidation()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Expired card validation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 119
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table11.AddRow(new string[] {
                            "Owner",
                            "John Doe"});
                table11.AddRow(new string[] {
                            "Number",
                            "4111111111111111"});
                table11.AddRow(new string[] {
                            "Date",
                            "01/2020"});
                table11.AddRow(new string[] {
                            "Cvv",
                            "123"});
#line 120
    await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table11, "Given ");
#line hidden
#line 126
    await testRunner.WhenAsync("I submit the card for validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 127
    await testRunner.ThenAsync("the response should be a bad request", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 128
    await testRunner.AndAsync("the validation error should contain \"Wrong date\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Invalid CVV format")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Invalid CVV format")]
        public async global::System.Threading.Tasks.Task InvalidCVVFormat()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Invalid CVV format", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table12.AddRow(new string[] {
                            "Owner",
                            "John Doe"});
                table12.AddRow(new string[] {
                            "Number",
                            "4111111111111111"});
                table12.AddRow(new string[] {
                            "Date",
                            "12/2025"});
                table12.AddRow(new string[] {
                            "Cvv",
                            "12"});
#line 131
    await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table12, "Given ");
#line hidden
#line 137
    await testRunner.WhenAsync("I submit the card for validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 138
    await testRunner.ThenAsync("the response should be a bad request", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 139
    await testRunner.AndAsync("the validation error should contain \"Wrong cvv\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Multiple validation errors")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Multiple validation errors")]
        public async global::System.Threading.Tasks.Task MultipleValidationErrors()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Multiple validation errors", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 141
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table13.AddRow(new string[] {
                            "Owner",
                            ""});
                table13.AddRow(new string[] {
                            "Number",
                            ""});
                table13.AddRow(new string[] {
                            "Date",
                            ""});
                table13.AddRow(new string[] {
                            "Cvv",
                            ""});
#line 142
    await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table13, "Given ");
#line hidden
#line 148
    await testRunner.WhenAsync("I submit the card for validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 149
    await testRunner.ThenAsync("the response should be a bad request", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 150
    await testRunner.AndAsync("the validation error should contain \"Owner is required\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 151
    await testRunner.AndAsync("the validation error should contain \"Number is required\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 152
    await testRunner.AndAsync("the validation error should contain \"Date is required\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 153
    await testRunner.AndAsync("the validation error should contain \"Cvv is required\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Multiple valid card types")]
        [Xunit.TraitAttribute("FeatureTitle", "Credit Card Validation")]
        [Xunit.TraitAttribute("Description", "Multiple valid card types")]
        [Xunit.InlineDataAttribute("Alice Doe", "4000000000000002", "01/2026", "123", "Visa", new string[0])]
        [Xunit.InlineDataAttribute("Bob Smith", "5105105105105100", "02/2026", "456", "MasterCard", new string[0])]
        [Xunit.InlineDataAttribute("Carol Lee", "371449635398431", "03/2026", "7890", "AmericanExpress", new string[0])]
        public async global::System.Threading.Tasks.Task MultipleValidCardTypes(string owner, string number, string date, string cvv, string expected_Type, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("owner", owner);
            argumentsOfScenario.Add("number", number);
            argumentsOfScenario.Add("date", date);
            argumentsOfScenario.Add("cvv", cvv);
            argumentsOfScenario.Add("expected_type", expected_Type);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Multiple valid card types", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 155
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                            "Field",
                            "Value"});
                table14.AddRow(new string[] {
                            "Owner",
                            string.Format("{0}", owner)});
                table14.AddRow(new string[] {
                            "Number",
                            string.Format("{0}", number)});
                table14.AddRow(new string[] {
                            "Date",
                            string.Format("{0}", date)});
                table14.AddRow(new string[] {
                            "Cvv",
                            string.Format("{0}", cvv)});
#line 156
    await testRunner.GivenAsync("I have a credit card with the following details:", ((string)(null)), table14, "Given ");
#line hidden
#line 162
    await testRunner.WhenAsync("I submit the card for validation", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 163
    await testRunner.ThenAsync("the response should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 164
    await testRunner.AndAsync(string.Format("the payment system type should be \"{0}\"", expected_Type), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CreditCardValidationFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CreditCardValidationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
